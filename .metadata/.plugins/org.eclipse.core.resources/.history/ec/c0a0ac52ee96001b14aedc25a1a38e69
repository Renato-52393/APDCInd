package pt.unl.fct.di.apdc.projindividual.resources;

import java.util.logging.Logger;

import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import org.apache.commons.codec.digest.DigestUtils;

import com.google.cloud.datastore.Datastore;
import com.google.cloud.datastore.DatastoreOptions;
import com.google.cloud.datastore.Entity;
import com.google.cloud.datastore.Key;
import com.google.cloud.datastore.KeyFactory;
import com.google.cloud.datastore.Transaction;
import com.google.gson.Gson;

import pt.unl.fct.di.apdc.projindividual.util.AuthToken;
import pt.unl.fct.di.apdc.projindividual.util.LoginData;

@Path("/remove")
@Produces(MediaType.APPLICATION_JSON + ";charset=utf-8")
public class PromoteResource {

	private static final Logger LOG = Logger.getLogger(LoginResource.class.getName());
	private final Datastore datastore =	DatastoreOptions.getDefaultInstance().getService();
	private final KeyFactory userKind = datastore.newKeyFactory().setKind("User");
	private final KeyFactory logKind = datastore.newKeyFactory().setKind("Log");

	private final Gson g = new Gson();

	public PromoteResource() {}

	@PUT
	@Path("/{tokenID}/{username}")
	public Response doPromote(@PathParam("tokenID") String tokenID, @PathParam ("username") String username) {
		
		Transaction txn = datastore.newTransaction();

		try {
			Key userKey = userKind.newKey(username);
			Entity user = datastore.get(userKey);
			
			Key logKey = logKind.newKey(tokenID);
			Entity log = datastore.get(logKey);

			if(user != null) {
				txn.rollback();
				return Response.status(Status.BAD_REQUEST).entity("User already exists.").build();
			} if(log != null) {
				txn.rollback();
				return Response.status(Status.BAD_REQUEST).entity(".").build();
			} if(!checkToken(log,username)) {
					txn.delete(logKey);
					txn.rollback();
			}
		}finally {
			if(txn.isActive())
				txn.rollback();
		}
		return Response.ok().build();
	}
		
	public boolean checkToken(Entity tokenID,String username) {
		if(!tokenID.getString("username").equals(username) || tokenID.getLong("expirationData") < System.currentTimeMillis()){
			return false;
		}
		return true;
	}
}
