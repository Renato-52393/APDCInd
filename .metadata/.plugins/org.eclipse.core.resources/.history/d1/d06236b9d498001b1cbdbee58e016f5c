package pt.unl.fct.di.apdc.projindividual.resources;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Logger;

import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import org.apache.commons.codec.digest.DigestUtils;

import com.google.cloud.Timestamp;
import com.google.cloud.datastore.Datastore;
import com.google.cloud.datastore.DatastoreOptions;
import com.google.cloud.datastore.Entity;
import com.google.cloud.datastore.Key;
import com.google.cloud.datastore.KeyFactory;
import com.google.cloud.datastore.Query;
import com.google.cloud.datastore.QueryResults;
import com.google.cloud.datastore.Transaction;
import com.google.cloud.datastore.StructuredQuery.CompositeFilter;
import com.google.cloud.datastore.StructuredQuery.OrderBy;
import com.google.cloud.datastore.StructuredQuery.PropertyFilter;

import pt.unl.fct.di.apdc.projindividual.util.RegisterData;

@Path("/profile")
public class ProfileResource {
	private static final Logger LOG = Logger.getLogger(LoginResource.class.getName());
	private final Datastore datastore =	DatastoreOptions.getDefaultInstance().getService();
	private final KeyFactory userKind = datastore.newKeyFactory().setKind("User");

	public ProfileResource() {}

	@POST
	@Path("/")
	@Consumes(MediaType.APPLICATION_JSON)
	public Response doProfile(ProfileData data) {

		LOG.fine("Update attempt by user: " + username);

		Transaction txn = datastore.newTransaction();

		try {
			Key userKey = userKind.newKey(username);
			Entity user = datastore.get(userKey);

			if(user == null) {
				txn.rollback();
				return Response.status(Status.BAD_REQUEST).entity("User does not exist.").build();
			} 	
			Query<Entity> query = Query.newEntityQueryBuilder()
					.setKind("UserLog")
					.setFilter(
							CompositeFilter.and(
									PropertyFilter.hasAncestor(
											datastore.newKeyFactory().setKind("User").newKey(data.username))
									)
							)
					.setOrderBy(OrderBy.desc("user_login_time"))
					.setLimit(3)
					.build();

			QueryResults<Entity> logs = datastore.run(query);

			List<Date> loginDates = new ArrayList();
			logs.forEachRemaining(userlog -> {
				loginDates.add(userlog.getTimestamp("user_login_time").toDate());
			});
			return Response.ok(g.toJson(attributes)).build();

		} finally {
			if(txn.isActive())
				txn.rollback();
		}
		return Response.ok().build();
	}

}
