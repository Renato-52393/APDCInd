package pt.unl.fct.di.apdc.projindividual.resources;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Logger;

import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.HttpHeaders;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import org.apache.commons.codec.digest.DigestUtils;

import com.google.cloud.Timestamp;
import com.google.cloud.datastore.*;
import com.google.cloud.datastore.StructuredQuery.CompositeFilter;
import com.google.cloud.datastore.StructuredQuery.OrderBy;
import com.google.cloud.datastore.StructuredQuery.PropertyFilter;


import com.google.gson.Gson;

import pt.unl.fct.di.apdc.projindividual.util.AuthToken;
import pt.unl.fct.di.apdc.projindividual.util.LoginData;

@Path("/login")
@Produces(MediaType.APPLICATION_JSON + ";charset=utf-8")
public class LoginResource {

	private static final Logger LOG = Logger.getLogger(LoginResource.class.getName());
	private final Datastore datastore =	DatastoreOptions.getDefaultInstance().getService();
	private final KeyFactory userKind = datastore.newKeyFactory().setKind("User");

	private final Gson g = new Gson();

	public LoginResource() {}

	@POST
	@Path("/v1")
	@Consumes(MediaType.APPLICATION_JSON)
	public Response doLoginv1(LoginData data) {
		LOG.fine("Login attempt by user: " + data.username);

		Key userKey = userKind.newKey(data.username);
		Entity user = datastore.get(userKey);

		if(!user.getString("pwd").equals(DigestUtils.sha512Hex(data.pwd)))
			return Response.status(Status.FORBIDDEN).entity("Invalid password").build();

		AuthToken at = new AuthToken(data.username);
		return Response.ok(g.toJson(at)).build();
	}

	@POST
	@Path("/v2")
	@Consumes(MediaType.APPLICATION_JSON)
	public Response doLoginv2(LoginData data,
			@Context HttpServletRequest request, 
			@Context HttpHeaders headers) {

		LOG.fine("Login attempt by user: " + data.username);

		Key userKey = userKind.newKey(data.username);

		//chave cujo pai e userKey
		Key ctrsKey = datastore.newKeyFactory()
				.addAncestors(PathElement.of("User",data.username))
				.setKind("UserStats")
				.newKey("counters");

		Key logKey = datastore.allocateId(datastore.newKeyFactory()
				.addAncestors(PathElement.of("User",data.username))
				.setKind("UserLog")
				.newKey());

		Transaction txn = datastore.newTransaction();
		try {
			Entity user = txn.get(userKey);
			if(user == null) {
				LOG.warning("Failed login attempt for username " + data.username);
				return Response.status(Status.FORBIDDEN).build();
			}
			Entity stats = txn.get(ctrsKey);
			if(stats == null) {
				stats = Entity.newBuilder(ctrsKey)
						.set("user_stats_logins",0L)
						.set("user_stats_failed",0L)
						.set("user_first_logins",Timestamp.now())
						.set("user_last_logins",Timestamp.now())
						.build();
			}

			String hashedPwd = (String) user.getString("user_pwd");

			if(hashedPwd.equals(DigestUtils.sha512Hex(data.pwd))) {
				Entity log = Entity.newBuilder(logKey)
						.set("user_login_ip", request.getRemoteAddr())
						.set("user_login_host", request.getRemoteHost())
						.set("user_login_latlon", StringValue.newBuilder(headers.getHeaderString("X-AppEngine-CityLatLong"))
								.setExcludeFromIndexes(true).build())
						.set("user_login_city", headers.getHeaderString("X-AppEngine-City"))
						.set("user_login_country", headers.getHeaderString("X-AppEngine-Country"))
						.set("user_login_time",Timestamp.now())
						.build();

				Entity ustats = Entity.newBuilder(ctrsKey)
						.set("user_stats_logins", 1L + stats.getLong("user_stats_logins"))
						.set("user_stats_failed", 0L)
						.set("user_first_login", stats.getTimestamp("user_first_login"))
						.set("user_last_login", Timestamp.now())
						.build();
				txn.put(log,ustats);
				txn.commit();

				AuthToken at = new AuthToken(data.username);
				LOG.info("User '" + data.username + "' logged in successfully.");
				return Response.ok(g.toJson(at)).build();
			}else {
				Entity ustats = Entity.newBuilder(ctrsKey)
						.set("user_stats_logins", stats.getLong("user_stats_logins"))
						.set("user_stats_failed", 1L + stats.getLong("user_stats_failed"))
						.set("user_first_login", stats.getTimestamp("user_first_login"))
						.set("user_last_login", stats.getTimestamp("user_last_login"))
						.set("user_last_attempt", Timestamp.now())
						.build();
				txn.put(ustats);
				txn.commit();
				LOG.info("Wrong password or username: " + data.username);
				return Response.status(Status.FORBIDDEN).build();
			}
		} catch (Exception e) {
			txn.rollback();
			LOG.severe(e.getMessage());
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		} finally {
			if(txn.isActive()) {
				txn.rollback();
				return Response.status(Status.INTERNAL_SERVER_ERROR).build();
			}
		}
	}

	@POST
	@Path("/v3")
	@Consumes(MediaType.APPLICATION_JSON)
	public Response doLoginv3(LoginData data) {
		LOG.fine("Login attempt by user: " + data.username);

		Key userKey = userKind.newKey(data.username);
		Entity user = datastore.get(userKey);

		if(!user.getString("pwd").equals(DigestUtils.sha512Hex(data.pwd)))
			return Response.status(Status.FORBIDDEN).entity("Invalid password").build();

		AuthToken at = new AuthToken(data.username);
		return Response.ok(g.toJson(at)).build();
	}

	@GET
	@Path("/{username}")
	public Response checkUsernameAvailable(@PathParam("username") String username) {

		if(!username.trim().equals("renato")) {
			return Response.ok().entity(g.toJson(false)).build();
		} else {
			return Response.ok().entity(g.toJson(true)).build();
		}
	}
/*
	@POST
	@Path("/user")
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON + ";charset=utf-8")
	public Response checkUsernameAvailable(LoginData data) {

		Key userKey = userKind.newKey(data.username);
		Entity user = datastore.get(userKey);
		if(user != null && user.getString("user_pwd").contentEquals(DigestUtils.sha512Hex(data.pwd))) {

			//get the date of yesterday
			Calendar cal = Calendar.getInstance();
			Timestamp yesterday = Timestamp.of(cal.getTime());

			Query<Entity> query = Query.newEntityQueryBuilder()
					.setKind("UserLog")
					.setFilter(
							CompositeFilter.and(
									PropertyFilter.hasAncestor(
											datastore.newKeyFactory().setKind("User").newKey(data.username)),
									PropertyFilter.ge("user_login_time", yesterday)
									)
							)
					.setOrderBy(OrderBy.desc("user_login_time"))
					.setLimit(3)
					.build();
			
			QueryResults<Entity> logs = datastore.run(query);
			
			List<Date> loginDates = new ArrayList();
			logs.forEachRemaining(userlog -> {
				loginDates.add(userlog.getTimestamp("user_login_time").toDate());
			});
			return Response.ok(g.toJson(loginDates)).build();
		} else {
			
		}

	}
	*/
}