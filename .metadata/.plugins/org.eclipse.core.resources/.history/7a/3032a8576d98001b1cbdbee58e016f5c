package pt.unl.fct.di.apdc.projindividual.resources;

import java.util.logging.Logger;

import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import org.apache.commons.codec.digest.DigestUtils;

import com.google.cloud.Timestamp;
import com.google.cloud.datastore.Datastore;
import com.google.cloud.datastore.DatastoreOptions;
import com.google.cloud.datastore.Entity;
import com.google.cloud.datastore.Key;
import com.google.cloud.datastore.KeyFactory;
import com.google.cloud.datastore.StringValue;
import com.google.cloud.datastore.Transaction;
import com.google.gson.Gson;

import pt.unl.fct.di.apdc.projindividual.util.AuthToken;
import pt.unl.fct.di.apdc.projindividual.util.LoginData;
import pt.unl.fct.di.apdc.projindividual.util.RegisterData;

@Path("/update")
public class UpdateResource {

	private static final Logger LOG = Logger.getLogger(LoginResource.class.getName());
	private final Datastore datastore =	DatastoreOptions.getDefaultInstance().getService();
	private final KeyFactory userKind = datastore.newKeyFactory().setKind("User");
	private final KeyFactory logKind = datastore.newKeyFactory().setKind("Log");

	public UpdateResource() {}

	@PUT
	@Path("/{username}")
	@Consumes(MediaType.APPLICATION_JSON)
	public Response doUpdate(RegisterData data, @PathParam ("username") String username) {

		LOG.fine("Update attempt by user: " + username);

		Transaction txn = datastore.newTransaction();

		try {
			
			Key logKey = logKind.newKey(username);
			Entity log = datastore.get(logKey);
			
			if(log == null) {
				txn.rollback();
				return Response.status(Status.BAD_REQUEST).entity("User is not logged in!").build();
			}
			
			Key userKey = userKind.newKey(log.getString("username"));
			Entity user = datastore.get(userKey);
			 
			 if(user == null) {
				txn.rollback();
				return Response.status(Status.BAD_REQUEST).entity("User does not exist.").build();
			} else {

				checkInput(data, user);
				
				user = Entity.newBuilder(logKey)
						.set("email", data.email)
						.set("pwd", DigestUtils.sha512Hex(data.pwd))
						.set("pwd_conf", data.pwd_conf)
						.set("profile", data.profile)
						.set("phone", data.phone)
						.set("mobile", data.mobile)
						.set("address", data.address)
						.set("complementar address", data.comp_address)
						.set("local", data.local)
						.build();
				
				txn.put(user);
				txn.commit();
			}
		} finally {
			if(txn.isActive())
				txn.rollback();
		}
		return Response.ok().build();
	}
	
	public void checkInput(RegisterData data, Entity user) {
		if(data.username.equals("")) 
			data.username = user.getString("username");
		if(data.email.equals("")) 
			data.email = user.getString("email");
		if(data.pwd.equals("")) 
			data.pwd = user.getString("pwd");
		if(data.pwd_conf.equals("")) 
			data.pwd_conf = user.getString("pwd_conf");
		if(data.profile.equals(""))
			data.profile = user.getString("profile");
		if(data.phone.equals(""))
			data.phone = user.getString("phone");
		if(data.mobile.equals(""))
			data.mobile = user.getString("mobile");
		if(data.address.equals(""))
			data.address = user.getString("address");
		if(data.comp_address.equals(""))
			data.comp_address = user.getString("comp_address");
		if(data.local.equals(""))
			data.local = user.getString("local");
	}
}
