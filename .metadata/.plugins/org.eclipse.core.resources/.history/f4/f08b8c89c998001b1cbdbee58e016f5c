package pt.unl.fct.di.apdc.projindividual.resources;

import java.util.logging.Logger;

import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import org.apache.commons.codec.digest.DigestUtils;

import com.google.cloud.Timestamp;
import com.google.cloud.datastore.Datastore;
import com.google.cloud.datastore.DatastoreOptions;
import com.google.cloud.datastore.Entity;
import com.google.cloud.datastore.Key;
import com.google.cloud.datastore.KeyFactory;
import com.google.cloud.datastore.Transaction;
import com.google.gson.Gson;

import pt.unl.fct.di.apdc.projindividual.util.AuthToken;
import pt.unl.fct.di.apdc.projindividual.util.LoginData;

@Path("/logout")
public class LogoutResource {

	private static final Logger LOG = Logger.getLogger(LoginResource.class.getName());
	private final Datastore datastore =	DatastoreOptions.getDefaultInstance().getService();
	private final KeyFactory userKind = datastore.newKeyFactory().setKind("User");
	private final KeyFactory logKind = datastore.newKeyFactory().setKind("Log");

	private final Gson g = new Gson();

	public LogoutResource() {}

	@POST
	@Path("/")
	@Consumes(MediaType.APPLICATION_JSON)
	public Response doLogin(LoginData data,
			@Context HttpServletRequest request, 
			@Context HttpHeaders headers) {

		LOG.fine("Login attempt by user: " + data.username);



		Transaction txn = datastore.newTransaction();

		try {
			Key userKey = userKind.newKey(data.username);
			Entity user = datastore.get(userKey);

			Key logKey = logKind.newKey(data.username);
			Entity log = datastore.get(logKey);

			if(user == null) {
				txn.rollback();
				LOG.warning("Failed login attempt for username " + data.username);
				return Response.status(Status.FORBIDDEN).entity("Failed login attempt for username" + data.username).build();
			}
			if(log == null) {
				txn.rollback();
				LOG.warning("User is not logged in!" + data.username);
				return Response.status(Status.FORBIDDEN).entity("User is already logged in!" + data.username).build();
			} else {
				datastore.delete(logKey);
				txn.commit();

				LOG.info("User '" + data.username + "' logged in successfully.");
				return Response.ok().build();
			}
		} finally {
			if(txn.isActive()) {
				txn.rollback();
				return Response.status(Status.INTERNAL_SERVER_ERROR).build();
			}
		}
	}
}
